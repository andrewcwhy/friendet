import { type ElementInterface, type Mapped, type Solid, type ValueItemID } from '../main/types.ts';
import { type InspectorUpdateMap, PropGetterState } from './types.ts';
export declare class ValueNode {
    getValue: (() => unknown) | undefined;
    private trackedStores;
    private selected;
    constructor(getValue: (() => unknown) | undefined);
    addStoreObserver(unsub: VoidFunction): void;
    private unsubscribe;
    reset(): void;
    isSelected(): boolean;
    setSelected(selected: boolean): void;
}
export declare class ValueNodeMap {
    private record;
    get(id: ValueItemID): ValueNode | undefined;
    add(id: ValueItemID, getValue: (() => unknown) | undefined): void;
    reset(): void;
}
export declare namespace Inspector {
    /** Prop becomes stale or live (is being currently listened to reactively or not) */
    type OnPropStateChange = (key: string, state: PropGetterState) => void;
    type OnValueUpdate = (id: ValueItemID) => void;
}
export type ObservedPropsMap = WeakMap<Solid.Component['props'], ObservedProps>;
declare const $NOT_SET: unique symbol;
/**
 * Manages observing getter properties.
 * This is used to track when a prop is accessed and when it is no longer accessed. (STALE | LIVE)
 */
export declare class ObservedProps {
    readonly props: Solid.Component['props'];
    constructor(props: Solid.Component['props']);
    private onPropStateChange?;
    private onValueUpdate?;
    private observedGetters;
    observe(onPropStateChange: Inspector.OnPropStateChange, onValueUpdate: Inspector.OnValueUpdate): void;
    unobserve(): void;
    observeProp(key: string, id: ValueItemID, get: () => unknown): {
        getValue: () => unknown | typeof $NOT_SET;
        isStale: boolean;
    };
}
declare const compareProxyPropKeys: (oldKeys: readonly string[], newKeys: readonly string[]) => InspectorUpdateMap["propKeys"] | null;
/**
 * Clear all observers from inspected owner. (value updates, prop updates, etc.)
 * Used to clear observers when the inspected owner is switched.
 */
export declare function clearOwnerObservers(owner: Solid.Owner, observedPropsMap: ObservedPropsMap): void;
export type CollectDetailsConfig<TEl extends object> = {
    onPropStateChange: Inspector.OnPropStateChange;
    onValueUpdate: Inspector.OnValueUpdate;
    observedPropsMap: ObservedPropsMap;
    eli: ElementInterface<TEl>;
};
export declare function collectOwnerDetails<TEl extends object>(owner: Solid.Owner, config: CollectDetailsConfig<TEl>): {
    details: Mapped.OwnerDetails;
    valueMap: ValueNodeMap;
    checkProxyProps: (() => ReturnType<typeof compareProxyPropKeys>) | undefined;
};
export {};
//# sourceMappingURL=inspector.d.ts.map