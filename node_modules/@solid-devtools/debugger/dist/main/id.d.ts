import { type NodeID, type Solid } from './types.ts';
export declare const enum ObjectType {
    Owner = "OWNER",
    Element = "ELEMENT",
    Signal = "SIGNAL",
    Store = "STORE",
    StoreNode = "STORE_NODE",
    CustomValue = "CUSTOM_VALUE"
}
type ValueMap = {
    [ObjectType.Owner]: Solid.Owner;
    [ObjectType.Element]: object;
    [ObjectType.Signal]: Solid.Signal;
    [ObjectType.Store]: Solid.Store;
    [ObjectType.StoreNode]: Solid.StoreNode;
    [ObjectType.CustomValue]: Solid.SourceMapValue;
};
export declare const getNewSdtId: () => NodeID;
export declare function getSdtId<T extends ObjectType>(obj: ValueMap[T], objType: T): NodeID;
export declare const get_id_owner: (o: Solid.Owner) => NodeID;
export declare const get_id_el: (o: object) => NodeID;
export declare const get_id_signal: (o: Solid.Signal) => NodeID;
export declare const get_id_store: (o: Solid.Store) => NodeID;
export declare const get_id_store_node: (o: Solid.StoreNode) => NodeID;
export declare const get_id_custom_value: (o: Solid.SourceMapValue) => NodeID;
export declare function getObjectById<T extends ObjectType>(id: NodeID, objType: T): ValueMap[T] | null;
/** Used for testing */
export declare function $setSdtId(o: object, id: NodeID): NodeID;
export {};
//# sourceMappingURL=id.d.ts.map