export { default as invariant } from 'tiny-invariant';
export { default as warning } from 'tiny-warning';
export { defer, TSR_DEFERRED_PROMISE, isMatch, joinPaths, cleanPath, trimPathLeft, trimPathRight, trimPath, resolvePath, parsePathname, interpolatePath, matchPathname, removeBasepath, matchByPath, encode, decode, rootRouteId, defaultSerializeError, defaultParseSearch, defaultStringifySearch, parseSearchWith, stringifySearchWith, escapeJSON, // SSR
pick, functionalUpdate, replaceEqualDeep, isPlainObject, isPlainArray, deepEqual, shallow, createControlledPromise, retainSearchParams, stripSearchParams, } from '@tanstack/router-core';
export { createHistory, createBrowserHistory, createHashHistory, createMemoryHistory, } from '@tanstack/history';
export { useAwaited, Await } from './awaited';
export { CatchBoundary, ErrorComponent } from './CatchBoundary';
export { ClientOnly } from './ClientOnly';
export { FileRoute, createFileRoute, FileRouteLoader, LazyRoute, createLazyRoute, createLazyFileRoute, } from './fileRoute';
export * from './history';
export { lazyRouteComponent } from './lazyRouteComponent';
export { useLinkProps, createLink, Link, linkOptions } from './link';
export { Matches, useMatchRoute, MatchRoute, useMatches, useParentMatches, useChildMatches, } from './Matches';
export { matchContext } from './matchContext';
export { Match, Outlet } from './Match';
export { useMatch } from './useMatch';
export { useLoaderDeps } from './useLoaderDeps';
export { useLoaderData } from './useLoaderData';
export { redirect, isRedirect } from '@tanstack/router-core';
export { RouteApi, getRouteApi, Route, createRoute, RootRoute, rootRouteWithContext, createRootRoute, createRootRouteWithContext, createRouteMask, NotFoundRoute, } from './route';
export { createRouter, Router } from './router';
export { componentTypes, lazyFn, SearchParamError, PathParamError, getInitialRouterState, } from '@tanstack/router-core';
export { RouterProvider, RouterContextProvider } from './RouterProvider';
export { useElementScrollRestoration, ScrollRestoration, } from './ScrollRestoration';
export { useBlocker, Block } from './useBlocker';
export { useNavigate, Navigate } from './useNavigate';
export { useParams } from './useParams';
export { useSearch } from './useSearch';
export { getRouterContext, // SSR
 } from './routerContext';
export { useRouteContext } from './useRouteContext';
export { useRouter } from './useRouter';
export { useRouterState } from './useRouterState';
export { useLocation } from './useLocation';
export { useCanGoBack } from './useCanGoBack';
export { useLayoutEffect } from './utils';
export { CatchNotFound, DefaultGlobalNotFound } from './not-found';
export { notFound, isNotFound } from '@tanstack/router-core';
export { ScriptOnce } from './ScriptOnce';
export { Asset } from './Asset';
export { HeadContent, useTags } from './HeadContent';
export { Scripts } from './Scripts';
//# sourceMappingURL=index.jsx.map