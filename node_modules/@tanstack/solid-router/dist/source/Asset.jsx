import { Meta, Style, Title } from '@solidjs/meta';
import { onCleanup, onMount } from 'solid-js';
export function Asset({ tag, attrs, children, }) {
    switch (tag) {
        case 'title':
            return <Title {...attrs}>{children}</Title>;
        case 'meta':
            return <Meta {...attrs}/>;
        case 'link':
            return <link {...attrs}/>;
        case 'style':
            return <Style {...attrs} innerHTML={children}/>;
        case 'script':
            return <Script attrs={attrs}>{children}</Script>;
        default:
            return null;
    }
}
function Script({ attrs, children, }) {
    onMount(() => {
        if (attrs?.src) {
            const script = document.createElement('script');
            for (const [key, value] of Object.entries(attrs)) {
                if (value !== undefined && value !== false) {
                    script.setAttribute(key, typeof value === 'boolean' ? '' : String(value));
                }
            }
            document.head.appendChild(script);
            onCleanup(() => {
                if (script.parentNode) {
                    script.parentNode.removeChild(script);
                }
            });
        }
        else if (typeof children === 'string') {
            const script = document.createElement('script');
            script.textContent = children;
            if (attrs) {
                for (const [key, value] of Object.entries(attrs)) {
                    if (value !== undefined && value !== false) {
                        script.setAttribute(key, typeof value === 'boolean' ? '' : String(value));
                    }
                }
            }
            document.head.appendChild(script);
            onCleanup(() => {
                if (script.parentNode) {
                    script.parentNode.removeChild(script);
                }
            });
        }
    });
    if (attrs?.src && typeof attrs.src === 'string') {
        return <script {...attrs}/>;
    }
    if (typeof children === 'string') {
        return <script {...attrs} innerHTML={children}/>;
    }
    return null;
}
//# sourceMappingURL=Asset.jsx.map