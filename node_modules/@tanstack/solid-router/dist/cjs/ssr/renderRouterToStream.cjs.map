{"version":3,"file":"renderRouterToStream.cjs","sources":["../../../src/ssr/renderRouterToStream.tsx"],"sourcesContent":["import * as Solid from 'solid-js/web'\nimport { isbot } from 'isbot'\nimport { transformReadableStreamWithRouter } from '@tanstack/router-core/ssr/server'\nimport type { JSXElement } from 'solid-js'\nimport type { ReadableStream } from 'node:stream/web'\nimport type { AnyRouter } from '@tanstack/router-core'\n\nexport const renderRouterToStream = async ({\n  request,\n  router,\n  responseHeaders,\n  children,\n}: {\n  request: Request\n  router: AnyRouter\n  responseHeaders: Headers\n  children: () => JSXElement\n}) => {\n  const { writable, readable } = new TransformStream()\n\n  const stream = Solid.renderToStream(children)\n\n  if (isbot(request.headers.get('User-Agent'))) {\n    await stream\n  }\n  stream.pipeTo(writable)\n\n  const responseStream = transformReadableStreamWithRouter(\n    router,\n    readable as unknown as ReadableStream,\n  )\n  return new Response(responseStream as any, {\n    status: router.state.statusCode,\n    headers: responseHeaders,\n  })\n}\n"],"names":["renderRouterToStream","request","router","responseHeaders","children","writable","readable","TransformStream","stream","Solid","renderToStream","isbot","headers","get","pipeTo","responseStream","transformReadableStreamWithRouter","Response","status","state","statusCode"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAOO,MAAMA,uBAAuB,OAAO;AAAA,EACzCC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAMF,MAAM;AACE,QAAA;AAAA,IAAEC;AAAAA,IAAUC;AAAAA,EAAS,IAAI,IAAIC,gBAAgB;AAE7CC,QAAAA,SAASC,iBAAMC,eAAeN,QAAQ;AAE5C,MAAIO,MAAAA,MAAMV,QAAQW,QAAQC,IAAI,YAAY,CAAC,GAAG;AACtCL,UAAAA;AAAAA,EAAAA;AAERA,SAAOM,OAAOT,QAAQ;AAEhBU,QAAAA,iBAAiBC,OAAAA,kCACrBd,QACAI,QACF;AACO,SAAA,IAAIW,SAASF,gBAAuB;AAAA,IACzCG,QAAQhB,OAAOiB,MAAMC;AAAAA,IACrBR,SAAST;AAAAA,EAAAA,CACV;AACH;;"}