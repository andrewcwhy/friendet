{"version":3,"file":"renderRouterToString.cjs","sources":["../../../src/ssr/renderRouterToString.tsx"],"sourcesContent":["import * as Solid from 'solid-js/web'\nimport type { JSXElement } from 'solid-js'\nimport type { AnyRouter } from '@tanstack/router-core'\n\nexport const renderRouterToString = async ({\n  router,\n  responseHeaders,\n  children,\n}: {\n  router: AnyRouter\n  responseHeaders: Headers\n  children: () => JSXElement\n}) => {\n  try {\n    let html = Solid.renderToString(children)\n    const injectedHtml = await Promise.all(router.serverSsr!.injectedHtml).then(\n      (htmls) => htmls.join(''),\n    )\n    html = html.replace(`</body>`, `${injectedHtml}</body>`)\n    return new Response(html, {\n      status: router.state.statusCode,\n      headers: responseHeaders,\n    })\n  } catch (error) {\n    console.error('Render to string error:', error)\n    return new Response('Internal Server Error', {\n      status: 500,\n      headers: responseHeaders,\n    })\n  }\n}\n"],"names":["renderRouterToString","router","responseHeaders","children","html","Solid","renderToString","injectedHtml","Promise","all","serverSsr","then","htmls","join","replace","Response","status","state","statusCode","headers","error"],"mappings":";;;;;;;;;;;;;;;;;;;;AAIO,MAAMA,uBAAuB,OAAO;AAAA,EACzCC;AAAAA,EACAC;AAAAA,EACAC;AAKF,MAAM;AACA,MAAA;AACEC,QAAAA,OAAOC,iBAAMC,eAAeH,QAAQ;AACxC,UAAMI,eAAe,MAAMC,QAAQC,IAAIR,OAAOS,UAAWH,YAAY,EAAEI,KACpEC,CAAAA,UAAUA,MAAMC,KAAK,EAAE,CAC1B;AACAT,WAAOA,KAAKU,QAAQ,WAAW,GAAGP,YAAY,SAAS;AAChD,WAAA,IAAIQ,SAASX,MAAM;AAAA,MACxBY,QAAQf,OAAOgB,MAAMC;AAAAA,MACrBC,SAASjB;AAAAA,IAAAA,CACV;AAAA,WACMkB,OAAO;AACNA,YAAAA,MAAM,2BAA2BA,KAAK;AACvC,WAAA,IAAIL,SAAS,yBAAyB;AAAA,MAC3CC,QAAQ;AAAA,MACRG,SAASjB;AAAAA,IAAAA,CACV;AAAA,EAAA;AAEL;;"}