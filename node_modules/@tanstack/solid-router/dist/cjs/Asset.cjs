"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const Solid = require("solid-js/web");
const meta = require("@solidjs/meta");
const Solid$1 = require("solid-js");
var _tmpl$ = /* @__PURE__ */ Solid.template(`<link>`), _tmpl$2 = /* @__PURE__ */ Solid.template(`<script>`);
function Asset({
  tag,
  attrs,
  children
}) {
  switch (tag) {
    case "title":
      return Solid.createComponent(meta.Title, Solid.mergeProps(attrs, {
        children
      }));
    case "meta":
      return Solid.createComponent(meta.Meta, attrs);
    case "link":
      return (() => {
        var _el$ = _tmpl$();
        Solid.spread(_el$, attrs, false, false);
        return _el$;
      })();
    case "style":
      return Solid.createComponent(meta.Style, Solid.mergeProps(attrs, {
        innerHTML: children
      }));
    case "script":
      return Solid.createComponent(Script, {
        attrs,
        children
      });
    default:
      return null;
  }
}
function Script({
  attrs,
  children
}) {
  Solid$1.onMount(() => {
    if (attrs == null ? void 0 : attrs.src) {
      const script = document.createElement("script");
      for (const [key, value] of Object.entries(attrs)) {
        if (value !== void 0 && value !== false) {
          script.setAttribute(key, typeof value === "boolean" ? "" : String(value));
        }
      }
      document.head.appendChild(script);
      Solid$1.onCleanup(() => {
        if (script.parentNode) {
          script.parentNode.removeChild(script);
        }
      });
    } else if (typeof children === "string") {
      const script = document.createElement("script");
      script.textContent = children;
      if (attrs) {
        for (const [key, value] of Object.entries(attrs)) {
          if (value !== void 0 && value !== false) {
            script.setAttribute(key, typeof value === "boolean" ? "" : String(value));
          }
        }
      }
      document.head.appendChild(script);
      Solid$1.onCleanup(() => {
        if (script.parentNode) {
          script.parentNode.removeChild(script);
        }
      });
    }
  });
  if ((attrs == null ? void 0 : attrs.src) && typeof attrs.src === "string") {
    return (() => {
      var _el$2 = _tmpl$2();
      Solid.spread(_el$2, attrs, false, false);
      return _el$2;
    })();
  }
  if (typeof children === "string") {
    return (() => {
      var _el$3 = _tmpl$2();
      Solid.spread(_el$3, Solid.mergeProps(attrs, {
        "innerHTML": children
      }), false, false);
      return _el$3;
    })();
  }
  return null;
}
exports.Asset = Asset;
//# sourceMappingURL=Asset.cjs.map
