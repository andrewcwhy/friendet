{"version":3,"file":"link.cjs","sources":["../../src/link.tsx"],"sourcesContent":["import * as Solid from 'solid-js'\n\nimport { mergeRefs } from '@solid-primitives/refs'\n\nimport {\n  deepEqual,\n  exactPathTest,\n  functionalUpdate,\n  preloadWarning,\n  removeTrailingSlash,\n} from '@tanstack/router-core'\nimport { Dynamic } from 'solid-js/web'\nimport { useRouterState } from './useRouterState'\nimport { useRouter } from './useRouter'\n\nimport { useIntersectionObserver } from './utils'\n\nimport { useMatch } from './useMatch'\nimport type {\n  AnyRouter,\n  Constrain,\n  LinkCurrentTargetElement,\n  LinkOptions,\n  RegisteredRouter,\n  RoutePaths,\n} from '@tanstack/router-core'\nimport type {\n  ValidateLinkOptions,\n  ValidateLinkOptionsArray,\n} from './typePrimitives'\n\nexport function useLinkProps<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TFrom extends RoutePaths<TRouter['routeTree']> | string = string,\n  TTo extends string = '',\n  TMaskFrom extends RoutePaths<TRouter['routeTree']> | string = TFrom,\n  TMaskTo extends string = '',\n>(\n  options: UseLinkPropsOptions<TRouter, TFrom, TTo, TMaskFrom, TMaskTo>,\n): Solid.ComponentProps<'a'> {\n  const router = useRouter()\n  const [isTransitioning, setIsTransitioning] = Solid.createSignal(false)\n  let hasRenderFetched = false\n\n  const [local, rest] = Solid.splitProps(\n    Solid.mergeProps(\n      {\n        activeProps: () => ({ class: 'active' }),\n        inactiveProps: () => ({}),\n      },\n      options,\n    ),\n    [\n      'activeProps',\n      'inactiveProps',\n      'activeOptions',\n      'to',\n      'preload',\n      'preloadDelay',\n      'hashScrollIntoView',\n      'replace',\n      'startTransition',\n      'resetScroll',\n      'viewTransition',\n      'target',\n      'disabled',\n      'style',\n      'class',\n      'onClick',\n      'onFocus',\n      'onMouseEnter',\n      'onMouseLeave',\n      'onMouseOver',\n      'onMouseOut',\n      'onTouchStart',\n      'ignoreBlocker',\n    ],\n  )\n\n  // const {\n  //   // custom props\n  //   activeProps = () => ({ class: 'active' }),\n  //   inactiveProps = () => ({}),\n  //   activeOptions,\n  //   to,\n  //   preload: userPreload,\n  //   preloadDelay: userPreloadDelay,\n  //   hashScrollIntoView,\n  //   replace,\n  //   startTransition,\n  //   resetScroll,\n  //   viewTransition,\n  //   // element props\n  //   children,\n  //   target,\n  //   disabled,\n  //   style,\n  //   class,\n  //   onClick,\n  //   onFocus,\n  //   onMouseEnter,\n  //   onMouseLeave,\n  //   onTouchStart,\n  //   ignoreBlocker,\n  //   ...rest\n  // } = options\n\n  const [_, propsSafeToSpread] = Solid.splitProps(rest, [\n    'params',\n    'search',\n    'hash',\n    'state',\n    'mask',\n    'reloadDocument',\n    'unsafeRelative',\n  ])\n\n  // If this link simply reloads the current route,\n  // make sure it has a new key so it will trigger a data refresh\n\n  // If this `to` is a valid external URL, return\n  // null for LinkUtils\n\n  const type: Solid.Accessor<'internal' | 'external'> = () => {\n    try {\n      new URL(`${local.to}`)\n      return 'external'\n    } catch {}\n    return 'internal'\n  }\n\n  const currentSearch = useRouterState({\n    select: (s) => s.location.searchStr,\n  })\n\n  // when `from` is not supplied, use the route of the current match as the `from` location\n  // so relative routing works as expected\n  const from = useMatch({\n    strict: false,\n    select: (match) => options.from ?? match.fullPath,\n  })\n\n  const _options = () => ({\n    ...options,\n    from: from(),\n  })\n\n  const next = Solid.createMemo(() => {\n    currentSearch()\n    return router.buildLocation(_options() as any)\n  })\n\n  const preload = Solid.createMemo(() => {\n    if (_options().reloadDocument) {\n      return false\n    }\n    return local.preload ?? router.options.defaultPreload\n  })\n  const preloadDelay = () =>\n    local.preloadDelay ?? router.options.defaultPreloadDelay ?? 0\n\n  const isActive = useRouterState({\n    select: (s) => {\n      if (local.activeOptions?.exact) {\n        const testExact = exactPathTest(\n          s.location.pathname,\n          next().pathname,\n          router.basepath,\n        )\n        if (!testExact) {\n          return false\n        }\n      } else {\n        const currentPathSplit = removeTrailingSlash(\n          s.location.pathname,\n          router.basepath,\n        ).split('/')\n        const nextPathSplit = removeTrailingSlash(\n          next()?.pathname,\n          router.basepath,\n        )?.split('/')\n\n        const pathIsFuzzyEqual = nextPathSplit?.every(\n          (d, i) => d === currentPathSplit[i],\n        )\n        if (!pathIsFuzzyEqual) {\n          return false\n        }\n      }\n\n      if (local.activeOptions?.includeSearch ?? true) {\n        const searchTest = deepEqual(s.location.search, next().search, {\n          partial: !local.activeOptions?.exact,\n          ignoreUndefined: !local.activeOptions?.explicitUndefined,\n        })\n        if (!searchTest) {\n          return false\n        }\n      }\n\n      if (local.activeOptions?.includeHash) {\n        return s.location.hash === next().hash\n      }\n      return true\n    },\n  })\n\n  const doPreload = () =>\n    router.preloadRoute(_options() as any).catch((err: any) => {\n      console.warn(err)\n      console.warn(preloadWarning)\n    })\n\n  const preloadViewportIoCallback = (\n    entry: IntersectionObserverEntry | undefined,\n  ) => {\n    if (entry?.isIntersecting) {\n      doPreload()\n    }\n  }\n\n  const [ref, setRef] = Solid.createSignal<Element | null>(null)\n\n  useIntersectionObserver(\n    ref,\n    preloadViewportIoCallback,\n    { rootMargin: '100px' },\n    { disabled: !!local.disabled || !(preload() === 'viewport') },\n  )\n\n  Solid.createEffect(() => {\n    if (hasRenderFetched) {\n      return\n    }\n    if (!local.disabled && preload() === 'render') {\n      doPreload()\n      hasRenderFetched = true\n    }\n  })\n\n  if (type() === 'external') {\n    return Solid.mergeProps(\n      propsSafeToSpread,\n      {\n        ref,\n        get type() {\n          return type()\n        },\n        get href() {\n          return local.to\n        },\n      },\n      Solid.splitProps(local, [\n        'target',\n        'disabled',\n        'style',\n        'class',\n        'onClick',\n        'onFocus',\n        'onMouseEnter',\n        'onMouseLeave',\n        'onMouseOut',\n        'onMouseOver',\n        'onTouchStart',\n      ])[0],\n    ) as any\n  }\n\n  // The click handler\n  const handleClick = (e: MouseEvent) => {\n    if (\n      !local.disabled &&\n      !isCtrlEvent(e) &&\n      !e.defaultPrevented &&\n      (!local.target || local.target === '_self') &&\n      e.button === 0\n    ) {\n      e.preventDefault()\n\n      setIsTransitioning(true)\n\n      const unsub = router.subscribe('onResolved', () => {\n        unsub()\n        setIsTransitioning(false)\n      })\n\n      // All is well? Navigate!\n      // N.B. we don't call `router.commitLocation(next) here because we want to run `validateSearch` before committing\n      return router.navigate({\n        ..._options(),\n        replace: local.replace,\n        resetScroll: local.resetScroll,\n        hashScrollIntoView: local.hashScrollIntoView,\n        startTransition: local.startTransition,\n        viewTransition: local.viewTransition,\n        ignoreBlocker: local.ignoreBlocker,\n      })\n    }\n  }\n\n  // The click handler\n  const handleFocus = (_: MouseEvent) => {\n    if (local.disabled) return\n    if (preload()) {\n      doPreload()\n    }\n  }\n\n  const handleTouchStart = handleFocus\n\n  const handleEnter = (e: MouseEvent) => {\n    if (local.disabled) return\n    const eventTarget = (e.target || {}) as LinkCurrentTargetElement\n\n    if (preload()) {\n      if (eventTarget.preloadTimeout) {\n        return\n      }\n\n      eventTarget.preloadTimeout = setTimeout(() => {\n        eventTarget.preloadTimeout = null\n        doPreload()\n      }, preloadDelay())\n    }\n  }\n\n  const handleLeave = (e: MouseEvent) => {\n    if (local.disabled) return\n    const eventTarget = (e.target || {}) as LinkCurrentTargetElement\n\n    if (eventTarget.preloadTimeout) {\n      clearTimeout(eventTarget.preloadTimeout)\n      eventTarget.preloadTimeout = null\n    }\n  }\n\n  /** Call a JSX.EventHandlerUnion with the event. */\n  function callHandler<T, TEvent extends Event>(\n    event: TEvent & { currentTarget: T; target: Element },\n    handler: Solid.JSX.EventHandlerUnion<T, TEvent> | undefined,\n  ) {\n    if (handler) {\n      if (typeof handler === 'function') {\n        handler(event)\n      } else {\n        handler[0](handler[1], event)\n      }\n    }\n\n    return event.defaultPrevented\n  }\n\n  function composeEventHandlers<T>(\n    handlers: Array<Solid.JSX.EventHandlerUnion<T, any> | undefined>,\n  ) {\n    return (event: any) => {\n      for (const handler of handlers) {\n        callHandler(event, handler)\n      }\n    }\n  }\n\n  // Get the active props\n  const resolvedActiveProps: () => Omit<Solid.ComponentProps<'a'>, 'style'> & {\n    style?: Solid.JSX.CSSProperties\n  } = () =>\n    isActive() ? (functionalUpdate(local.activeProps as any, {}) ?? {}) : {}\n\n  // Get the inactive props\n  const resolvedInactiveProps: () => Omit<\n    Solid.ComponentProps<'a'>,\n    'style'\n  > & { style?: Solid.JSX.CSSProperties } = () =>\n    isActive() ? {} : functionalUpdate(local.inactiveProps, {})\n\n  const resolvedClassName = () =>\n    [local.class, resolvedActiveProps().class, resolvedInactiveProps().class]\n      .filter(Boolean)\n      .join(' ')\n\n  const resolvedStyle = () => ({\n    ...local.style,\n    ...resolvedActiveProps().style,\n    ...resolvedInactiveProps().style,\n  })\n\n  const href = Solid.createMemo(() => {\n    const nextLocation = next()\n    const maskedLocation = nextLocation?.maskedLocation\n\n    return _options().disabled\n      ? undefined\n      : maskedLocation\n        ? router.history.createHref(maskedLocation.href)\n        : router.history.createHref(nextLocation?.href)\n  })\n\n  return Solid.mergeProps(\n    propsSafeToSpread,\n    resolvedActiveProps,\n    resolvedInactiveProps,\n    () => {\n      return {\n        href: href(),\n        ref: mergeRefs(setRef, _options().ref),\n        onClick: composeEventHandlers([local.onClick, handleClick]),\n        onFocus: composeEventHandlers([local.onFocus, handleFocus]),\n        onMouseEnter: composeEventHandlers([local.onMouseEnter, handleEnter]),\n        onMouseOver: composeEventHandlers([local.onMouseOver, handleEnter]),\n        onMouseLeave: composeEventHandlers([local.onMouseLeave, handleLeave]),\n        onMouseOut: composeEventHandlers([local.onMouseOut, handleLeave]),\n        onTouchStart: composeEventHandlers([\n          local.onTouchStart,\n          handleTouchStart,\n        ]),\n        disabled: !!local.disabled,\n        target: local.target,\n        ...(Object.keys(resolvedStyle).length && { style: resolvedStyle }),\n        ...(resolvedClassName() && { class: resolvedClassName() }),\n        ...(local.disabled && {\n          role: 'link',\n          'aria-disabled': true,\n        }),\n        ...(isActive() && { 'data-status': 'active', 'aria-current': 'page' }),\n        ...(isTransitioning() && { 'data-transitioning': 'transitioning' }),\n      }\n    },\n  ) as any\n}\n\nexport type UseLinkPropsOptions<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TFrom extends RoutePaths<TRouter['routeTree']> | string = string,\n  TTo extends string | undefined = '.',\n  TMaskFrom extends RoutePaths<TRouter['routeTree']> | string = TFrom,\n  TMaskTo extends string = '.',\n> = ActiveLinkOptions<'a', TRouter, TFrom, TTo, TMaskFrom, TMaskTo> &\n  Omit<Solid.ComponentProps<'a'>, 'style'> & { style?: Solid.JSX.CSSProperties }\n\nexport type ActiveLinkOptions<\n  TComp = 'a',\n  TRouter extends AnyRouter = RegisteredRouter,\n  TFrom extends string = string,\n  TTo extends string | undefined = '.',\n  TMaskFrom extends string = TFrom,\n  TMaskTo extends string = '.',\n> = LinkOptions<TRouter, TFrom, TTo, TMaskFrom, TMaskTo> &\n  ActiveLinkOptionProps<TComp>\n\ntype ActiveLinkProps<TComp> = Partial<\n  LinkComponentSolidProps<TComp> & {\n    [key: `data-${string}`]: unknown\n  }\n>\n\nexport interface ActiveLinkOptionProps<TComp = 'a'> {\n  /**\n   * A function that returns additional props for the `active` state of this link.\n   * These props override other props passed to the link (`style`'s are merged, `class`'s are concatenated)\n   */\n  activeProps?: ActiveLinkProps<TComp> | (() => ActiveLinkProps<TComp>)\n  /**\n   * A function that returns additional props for the `inactive` state of this link.\n   * These props override other props passed to the link (`style`'s are merged, `class`'s are concatenated)\n   */\n  inactiveProps?: ActiveLinkProps<TComp> | (() => ActiveLinkProps<TComp>)\n}\n\nexport type LinkProps<\n  TComp = 'a',\n  TRouter extends AnyRouter = RegisteredRouter,\n  TFrom extends string = string,\n  TTo extends string | undefined = '.',\n  TMaskFrom extends string = TFrom,\n  TMaskTo extends string = '.',\n> = ActiveLinkOptions<TComp, TRouter, TFrom, TTo, TMaskFrom, TMaskTo> &\n  LinkPropsChildren\n\nexport interface LinkPropsChildren {\n  // If a function is passed as a child, it will be given the `isActive` boolean to aid in further styling on the element it returns\n  children?:\n    | Solid.JSX.Element\n    | ((state: {\n        isActive: boolean\n        isTransitioning: boolean\n      }) => Solid.JSX.Element)\n}\n\ntype LinkComponentSolidProps<TComp> = TComp extends Solid.ValidComponent\n  ? Omit<Solid.ComponentProps<TComp>, keyof CreateLinkProps>\n  : never\n\nexport type LinkComponentProps<\n  TComp = 'a',\n  TRouter extends AnyRouter = RegisteredRouter,\n  TFrom extends string = string,\n  TTo extends string | undefined = '.',\n  TMaskFrom extends string = TFrom,\n  TMaskTo extends string = '.',\n> = LinkComponentSolidProps<TComp> &\n  LinkProps<TComp, TRouter, TFrom, TTo, TMaskFrom, TMaskTo>\n\nexport type CreateLinkProps = LinkProps<\n  any,\n  any,\n  string,\n  string,\n  string,\n  string\n>\n\nexport type LinkComponent<\n  in out TComp,\n  in out TDefaultFrom extends string = string,\n> = <\n  TRouter extends AnyRouter = RegisteredRouter,\n  const TFrom extends string = TDefaultFrom,\n  const TTo extends string | undefined = undefined,\n  const TMaskFrom extends string = TFrom,\n  const TMaskTo extends string = '',\n>(\n  props: LinkComponentProps<TComp, TRouter, TFrom, TTo, TMaskFrom, TMaskTo>,\n) => Solid.JSX.Element\n\nexport interface LinkComponentRoute<\n  in out TDefaultFrom extends string = string,\n> {\n  defaultFrom: TDefaultFrom\n  <\n    TRouter extends AnyRouter = RegisteredRouter,\n    const TTo extends string | undefined = undefined,\n    const TMaskTo extends string = '',\n  >(\n    props: LinkComponentProps<\n      'a',\n      TRouter,\n      this['defaultFrom'],\n      TTo,\n      this['defaultFrom'],\n      TMaskTo\n    >,\n  ): Solid.JSX.Element\n}\n\nexport function createLink<const TComp>(\n  Comp: Constrain<TComp, any, (props: CreateLinkProps) => Solid.JSX.Element>,\n): LinkComponent<TComp> {\n  return (props) => <Link {...props} _asChild={Comp} />\n}\n\nexport const Link: LinkComponent<'a'> = (props) => {\n  const [local, rest] = Solid.splitProps(\n    props as typeof props & { _asChild: any },\n    ['_asChild', 'children'],\n  )\n\n  const [_, linkProps] = Solid.splitProps(\n    useLinkProps(rest as unknown as any),\n    ['type'],\n  )\n\n  const children = Solid.createMemo(() => {\n    const ch = local.children\n    if (typeof ch === 'function') {\n      return ch({\n        get isActive() {\n          return (linkProps as any)['data-status'] === 'active'\n        },\n        isTransitioning: false,\n      })\n    }\n\n    return ch satisfies Solid.JSX.Element\n  })\n\n  return (\n    <Dynamic component={local._asChild ? local._asChild : 'a'} {...linkProps}>\n      {children()}\n    </Dynamic>\n  )\n}\n\nfunction isCtrlEvent(e: MouseEvent) {\n  return !!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey)\n}\n\nexport type LinkOptionsFnOptions<\n  TOptions,\n  TComp,\n  TRouter extends AnyRouter = RegisteredRouter,\n> =\n  TOptions extends ReadonlyArray<any>\n    ? ValidateLinkOptionsArray<TRouter, TOptions, string, TComp>\n    : ValidateLinkOptions<TRouter, TOptions, string, TComp>\n\nexport type LinkOptionsFn<TComp> = <\n  const TOptions,\n  TRouter extends AnyRouter = RegisteredRouter,\n>(\n  options: LinkOptionsFnOptions<TOptions, TComp, TRouter>,\n) => TOptions\n\nexport const linkOptions: LinkOptionsFn<'a'> = (options) => {\n  return options as any\n}\n"],"names":["useLinkProps","options","router","useRouter","isTransitioning","setIsTransitioning","Solid","createSignal","hasRenderFetched","local","rest","splitProps","mergeProps","activeProps","class","inactiveProps","_","propsSafeToSpread","type","URL","to","currentSearch","useRouterState","select","s","location","searchStr","from","useMatch","strict","match","fullPath","_options","next","createMemo","buildLocation","preload","reloadDocument","defaultPreload","preloadDelay","defaultPreloadDelay","isActive","activeOptions","exact","testExact","exactPathTest","pathname","basepath","currentPathSplit","removeTrailingSlash","split","nextPathSplit","pathIsFuzzyEqual","every","d","i","includeSearch","searchTest","deepEqual","search","partial","ignoreUndefined","explicitUndefined","includeHash","hash","doPreload","preloadRoute","catch","err","console","warn","preloadWarning","preloadViewportIoCallback","entry","isIntersecting","ref","setRef","useIntersectionObserver","rootMargin","disabled","createEffect","href","handleClick","e","isCtrlEvent","defaultPrevented","target","button","preventDefault","unsub","subscribe","navigate","replace","resetScroll","hashScrollIntoView","startTransition","viewTransition","ignoreBlocker","handleFocus","handleTouchStart","handleEnter","eventTarget","preloadTimeout","setTimeout","handleLeave","clearTimeout","callHandler","event","handler","composeEventHandlers","handlers","resolvedActiveProps","functionalUpdate","resolvedInactiveProps","resolvedClassName","filter","Boolean","join","resolvedStyle","style","nextLocation","maskedLocation","undefined","history","createHref","mergeRefs","onClick","onFocus","onMouseEnter","onMouseOver","onMouseLeave","onMouseOut","onTouchStart","Object","keys","length","role","createLink","Comp","props","_$createComponent","Link","_$mergeProps","_asChild","linkProps","children","ch","Dynamic","component","metaKey","altKey","ctrlKey","shiftKey","linkOptions"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BO,SAASA,aAOdC,SAC2B;AAC3B,QAAMC,SAASC,UAAAA,UAAU;AACzB,QAAM,CAACC,iBAAiBC,kBAAkB,IAAIC,iBAAMC,aAAa,KAAK;AACtE,MAAIC,mBAAmB;AAEvB,QAAM,CAACC,OAAOC,IAAI,IAAIJ,iBAAMK,WAC1BL,iBAAMM,WACJ;AAAA,IACEC,aAAaA,OAAO;AAAA,MAAEC,OAAO;AAAA,IAAA;AAAA,IAC7BC,eAAeA,OAAO,CAAC;AAAA,EACzB,GACAd,OACF,GACA,CACE,eACA,iBACA,iBACA,MACA,WACA,gBACA,sBACA,WACA,mBACA,eACA,kBACA,UACA,YACA,SACA,SACA,WACA,WACA,gBACA,gBACA,eACA,cACA,gBACA,eAAe,CAEnB;AA8BA,QAAM,CAACe,GAAGC,iBAAiB,IAAIX,iBAAMK,WAAWD,MAAM,CACpD,UACA,UACA,QACA,SACA,QACA,kBACA,gBAAgB,CACjB;AAQD,QAAMQ,OAAgDA,MAAM;AACtD,QAAA;AACF,UAAIC,IAAI,GAAGV,MAAMW,EAAE,EAAE;AACd,aAAA;AAAA,IAAA,QACD;AAAA,IAAA;AACD,WAAA;AAAA,EACT;AAEA,QAAMC,gBAAgBC,eAAAA,eAAe;AAAA,IACnCC,QAASC,CAAMA,MAAAA,EAAEC,SAASC;AAAAA,EAAAA,CAC3B;AAID,QAAMC,OAAOC,SAAAA,SAAS;AAAA,IACpBC,QAAQ;AAAA,IACRN,QAASO,CAAAA,UAAU7B,QAAQ0B,QAAQG,MAAMC;AAAAA,EAAAA,CAC1C;AAED,QAAMC,WAAWA,OAAO;AAAA,IACtB,GAAG/B;AAAAA,IACH0B,MAAMA,KAAK;AAAA,EAAA;AAGPM,QAAAA,OAAO3B,iBAAM4B,WAAW,MAAM;AACpB,kBAAA;AACPhC,WAAAA,OAAOiC,cAAcH,UAAiB;AAAA,EAAA,CAC9C;AAEKI,QAAAA,UAAU9B,iBAAM4B,WAAW,MAAM;AACjCF,QAAAA,WAAWK,gBAAgB;AACtB,aAAA;AAAA,IAAA;AAEF5B,WAAAA,MAAM2B,WAAWlC,OAAOD,QAAQqC;AAAAA,EAAAA,CACxC;AACD,QAAMC,eAAeA,MACnB9B,MAAM8B,gBAAgBrC,OAAOD,QAAQuC,uBAAuB;AAE9D,QAAMC,WAAWnB,eAAAA,eAAe;AAAA,IAC9BC,QAASC,CAAM,MAAA;;AACTf,WAAAA,WAAMiC,kBAANjC,mBAAqBkC,OAAO;AACxBC,cAAAA,YAAYC,yBAChBrB,EAAEC,SAASqB,UACXb,OAAOa,UACP5C,OAAO6C,QACT;AACA,YAAI,CAACH,WAAW;AACP,iBAAA;AAAA,QAAA;AAAA,MACT,OACK;AACCI,cAAAA,mBAAmBC,+BACvBzB,EAAEC,SAASqB,UACX5C,OAAO6C,QACT,EAAEG,MAAM,GAAG;AACLC,cAAAA,iBAAgBF,qCACpBhB,gBAAAA,mBAAQa,UACR5C,OAAO6C,QACT,MAHsBE,mBAGnBC,MAAM;AAEHE,cAAAA,mBAAmBD,+CAAeE,MACtC,CAACC,GAAGC,MAAMD,MAAMN,iBAAiBO,CAAC;AAEpC,YAAI,CAACH,kBAAkB;AACd,iBAAA;AAAA,QAAA;AAAA,MACT;AAGE3C,YAAAA,WAAMiC,kBAANjC,mBAAqB+C,kBAAiB,MAAM;AAC9C,cAAMC,aAAaC,WAAAA,UAAUlC,EAAEC,SAASkC,QAAQ1B,OAAO0B,QAAQ;AAAA,UAC7DC,SAAS,GAACnD,WAAMiC,kBAANjC,mBAAqBkC;AAAAA,UAC/BkB,iBAAiB,GAACpD,WAAMiC,kBAANjC,mBAAqBqD;AAAAA,QAAAA,CACxC;AACD,YAAI,CAACL,YAAY;AACR,iBAAA;AAAA,QAAA;AAAA,MACT;AAGEhD,WAAAA,WAAMiC,kBAANjC,mBAAqBsD,aAAa;AACpC,eAAOvC,EAAEC,SAASuC,SAAS/B,KAAO+B,EAAAA;AAAAA,MAAAA;AAE7B,aAAA;AAAA,IAAA;AAAA,EACT,CACD;AAEKC,QAAAA,YAAYA,MAChB/D,OAAOgE,aAAalC,UAAiB,EAAEmC,MAAM,CAACC,QAAa;AACzDC,YAAQC,KAAKF,GAAG;AAChBC,YAAQC,KAAKC,yBAAc;AAAA,EAAA,CAC5B;AAEGC,QAAAA,4BAA4BA,CAChCC,UACG;AACH,QAAIA,+BAAOC,gBAAgB;AACf,gBAAA;AAAA,IAAA;AAAA,EAEd;AAEA,QAAM,CAACC,KAAKC,MAAM,IAAItE,iBAAMC,aAA6B,IAAI;AAE7DsE,QAAAA,wBACEF,KACAH,2BACA;AAAA,IAAEM,YAAY;AAAA,EAAA,GACd;AAAA,IAAEC,UAAU,CAAC,CAACtE,MAAMsE,YAAY,EAAE3C,QAAc,MAAA;AAAA,EAAA,CAClD;AAEA9B,mBAAM0E,aAAa,MAAM;AACvB,QAAIxE,kBAAkB;AACpB;AAAA,IAAA;AAEF,QAAI,CAACC,MAAMsE,YAAY3C,QAAAA,MAAc,UAAU;AACnC,gBAAA;AACS,yBAAA;AAAA,IAAA;AAAA,EACrB,CACD;AAEGlB,MAAAA,WAAW,YAAY;AAClBZ,WAAAA,iBAAMM,WACXK,mBACA;AAAA,MACE0D;AAAAA,MACA,IAAIzD,OAAO;AACT,eAAOA,KAAK;AAAA,MACd;AAAA,MACA,IAAI+D,OAAO;AACT,eAAOxE,MAAMW;AAAAA,MAAAA;AAAAA,IACf,GAEFd,iBAAMK,WAAWF,OAAO,CACtB,UACA,YACA,SACA,SACA,WACA,WACA,gBACA,gBACA,cACA,eACA,cAAc,CACf,EAAE,CAAC,CACN;AAAA,EAAA;AAIIyE,QAAAA,cAAcA,CAACC,MAAkB;AACrC,QACE,CAAC1E,MAAMsE,YACP,CAACK,YAAYD,CAAC,KACd,CAACA,EAAEE,qBACF,CAAC5E,MAAM6E,UAAU7E,MAAM6E,WAAW,YACnCH,EAAEI,WAAW,GACb;AACAJ,QAAEK,eAAe;AAEjBnF,yBAAmB,IAAI;AAEvB,YAAMoF,QAAQvF,OAAOwF,UAAU,cAAc,MAAM;AAC3C,cAAA;AACNrF,2BAAmB,KAAK;AAAA,MAAA,CACzB;AAID,aAAOH,OAAOyF,SAAS;AAAA,QACrB,GAAG3D,SAAS;AAAA,QACZ4D,SAASnF,MAAMmF;AAAAA,QACfC,aAAapF,MAAMoF;AAAAA,QACnBC,oBAAoBrF,MAAMqF;AAAAA,QAC1BC,iBAAiBtF,MAAMsF;AAAAA,QACvBC,gBAAgBvF,MAAMuF;AAAAA,QACtBC,eAAexF,MAAMwF;AAAAA,MAAAA,CACtB;AAAA,IAAA;AAAA,EAEL;AAGMC,QAAAA,cAAcA,CAAClF,OAAkB;AACrC,QAAIP,MAAMsE,SAAU;AACpB,QAAI3C,WAAW;AACH,gBAAA;AAAA,IAAA;AAAA,EAEd;AAEA,QAAM+D,mBAAmBD;AAEnBE,QAAAA,cAAcA,CAACjB,MAAkB;AACrC,QAAI1E,MAAMsE,SAAU;AACdsB,UAAAA,cAAelB,EAAEG,UAAU,CAAC;AAElC,QAAIlD,WAAW;AACb,UAAIiE,YAAYC,gBAAgB;AAC9B;AAAA,MAAA;AAGUA,kBAAAA,iBAAiBC,WAAW,MAAM;AAC5CF,oBAAYC,iBAAiB;AACnB,kBAAA;AAAA,MACZ,GAAG/D,cAAc;AAAA,IAAA;AAAA,EAErB;AAEMiE,QAAAA,cAAcA,CAACrB,MAAkB;AACrC,QAAI1E,MAAMsE,SAAU;AACdsB,UAAAA,cAAelB,EAAEG,UAAU,CAAC;AAElC,QAAIe,YAAYC,gBAAgB;AAC9BG,mBAAaJ,YAAYC,cAAc;AACvCD,kBAAYC,iBAAiB;AAAA,IAAA;AAAA,EAEjC;AAGSI,WAAAA,YACPC,OACAC,SACA;AACA,QAAIA,SAAS;AACP,UAAA,OAAOA,YAAY,YAAY;AACjCA,gBAAQD,KAAK;AAAA,MAAA,OACR;AACLC,gBAAQ,CAAC,EAAEA,QAAQ,CAAC,GAAGD,KAAK;AAAA,MAAA;AAAA,IAC9B;AAGF,WAAOA,MAAMtB;AAAAA,EAAAA;AAGf,WAASwB,qBACPC,UACA;AACA,WAAO,CAACH,UAAe;AACrB,iBAAWC,WAAWE,UAAU;AAC9BJ,oBAAYC,OAAOC,OAAO;AAAA,MAAA;AAAA,IAE9B;AAAA,EAAA;AAIF,QAAMG,sBAEFA,MACFtE,SAAS,IAAKuE,WAAiBvG,iBAAAA,MAAMI,aAAoB,CAAA,CAAE,KAAK,CAAA,IAAM,CAAC;AAGnEoG,QAAAA,wBAGoCA,MACxCxE,aAAa,CAAA,IAAKuE,WAAAA,iBAAiBvG,MAAMM,eAAe,EAAE;AAE5D,QAAMmG,oBAAoBA,MACxB,CAACzG,MAAMK,OAAOiG,oBAAsBjG,EAAAA,OAAOmG,sBAAsB,EAAEnG,KAAK,EACrEqG,OAAOC,OAAO,EACdC,KAAK,GAAG;AAEb,QAAMC,gBAAgBA,OAAO;AAAA,IAC3B,GAAG7G,MAAM8G;AAAAA,IACT,GAAGR,oBAAsBQ,EAAAA;AAAAA,IACzB,GAAGN,wBAAwBM;AAAAA,EAAAA;AAGvBtC,QAAAA,OAAO3E,iBAAM4B,WAAW,MAAM;AAClC,UAAMsF,eAAevF,KAAK;AAC1B,UAAMwF,iBAAiBD,6CAAcC;AAErC,WAAOzF,SAAS,EAAE+C,WACd2C,SACAD,iBACEvH,OAAOyH,QAAQC,WAAWH,eAAexC,IAAI,IAC7C/E,OAAOyH,QAAQC,WAAWJ,6CAAcvC,IAAI;AAAA,EAAA,CACnD;AAED,SAAO3E,iBAAMM,WACXK,mBACA8F,qBACAE,uBACA,MAAM;AACG,WAAA;AAAA,MACLhC,MAAMA,KAAK;AAAA,MACXN,KAAKkD,KAAAA,UAAUjD,QAAQ5C,SAAAA,EAAW2C,GAAG;AAAA,MACrCmD,SAASjB,qBAAqB,CAACpG,MAAMqH,SAAS5C,WAAW,CAAC;AAAA,MAC1D6C,SAASlB,qBAAqB,CAACpG,MAAMsH,SAAS7B,WAAW,CAAC;AAAA,MAC1D8B,cAAcnB,qBAAqB,CAACpG,MAAMuH,cAAc5B,WAAW,CAAC;AAAA,MACpE6B,aAAapB,qBAAqB,CAACpG,MAAMwH,aAAa7B,WAAW,CAAC;AAAA,MAClE8B,cAAcrB,qBAAqB,CAACpG,MAAMyH,cAAc1B,WAAW,CAAC;AAAA,MACpE2B,YAAYtB,qBAAqB,CAACpG,MAAM0H,YAAY3B,WAAW,CAAC;AAAA,MAChE4B,cAAcvB,qBAAqB,CACjCpG,MAAM2H,cACNjC,gBAAgB,CACjB;AAAA,MACDpB,UAAU,CAAC,CAACtE,MAAMsE;AAAAA,MAClBO,QAAQ7E,MAAM6E;AAAAA,MACd,GAAI+C,OAAOC,KAAKhB,aAAa,EAAEiB,UAAU;AAAA,QAAEhB,OAAOD;AAAAA,MAAc;AAAA,MAChE,GAAIJ,uBAAuB;AAAA,QAAEpG,OAAOoG,kBAAkB;AAAA,MAAE;AAAA,MACxD,GAAIzG,MAAMsE,YAAY;AAAA,QACpByD,MAAM;AAAA,QACN,iBAAiB;AAAA,MACnB;AAAA,MACA,GAAI/F,cAAc;AAAA,QAAE,eAAe;AAAA,QAAU,gBAAgB;AAAA,MAAO;AAAA,MACpE,GAAIrC,qBAAqB;AAAA,QAAE,sBAAsB;AAAA,MAAA;AAAA,IACnD;AAAA,EAAA,CAEJ;AACF;AAoHO,SAASqI,WACdC,MACsB;AACtB,SAAQC,CAAKC,UAAAA,QAAAA,gBAAMC,MAAIC,QAAAA,WAAKH,OAAK;AAAA,IAAEI,UAAUL;AAAAA,EAAAA,CAAQ,CAAA;AACvD;AAEO,MAAMG,OAA4BF,CAAU,UAAA;AAC3C,QAAA,CAAClI,OAAOC,IAAI,IAAIJ,iBAAMK,WAC1BgI,OACA,CAAC,YAAY,UAAU,CACzB;AAEM,QAAA,CAAC3H,GAAGgI,SAAS,IAAI1I,iBAAMK,WAC3BX,aAAaU,IAAsB,GACnC,CAAC,MAAM,CACT;AAEMuI,QAAAA,WAAW3I,iBAAM4B,WAAW,MAAM;AACtC,UAAMgH,KAAKzI,MAAMwI;AACb,QAAA,OAAOC,OAAO,YAAY;AAC5B,aAAOA,GAAG;AAAA,QACR,IAAIzG,WAAW;AACLuG,iBAAAA,UAAkB,aAAa,MAAM;AAAA,QAC/C;AAAA,QACA5I,iBAAiB;AAAA,MAAA,CAClB;AAAA,IAAA;AAGI8I,WAAAA;AAAAA,EAAAA,CACR;AAEDN,SAAAA,QAAAA,gBACGO,iBAAOL,mBAAA;AAAA,IAAA,IAACM,YAAS;AAAE3I,aAAAA,MAAMsI,WAAWtI,MAAMsI,WAAW;AAAA,IAAA;AAAA,KAASC,WAAS;AAAA,IAAA,IAAAC,WAAA;AAAA,aACrEA,SAAS;AAAA,IAAA;AAAA,EAAC,CAAA,CAAA;AAGjB;AAEA,SAAS7D,YAAYD,GAAe;AAC3B,SAAA,CAAC,EAAEA,EAAEkE,WAAWlE,EAAEmE,UAAUnE,EAAEoE,WAAWpE,EAAEqE;AACpD;AAkBO,MAAMC,cAAmCxJ,CAAY,YAAA;AACnDA,SAAAA;AACT;;;;;"}